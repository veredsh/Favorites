Index: kalloc.c
===================================================================
--- kalloc.c	(revision 3)
+++ kalloc.c	(working copy)
@@ -11,7 +11,8 @@
 
 void freerange(void *vstart, void *vend);
 extern char end[]; // first address after kernel loaded from ELF file
-
+int free_list_initial_size = 0;
+int free_list_current_size = 0;
 struct run {
   struct run *next;
 };
@@ -40,6 +41,7 @@
 {
   freerange(vstart, vend);
   kmem.use_lock = 1;
+	free_list_current_size = free_list_initial_size;
 }
 
 void
@@ -47,8 +49,10 @@
 {
   char *p;
   p = (char*)PGROUNDUP((uint)vstart);
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE){
     kfree(p);
+	  free_list_initial_size++;
+	}
 }
 
 //PAGEBREAK: 21
@@ -63,7 +67,7 @@
 
   if((uint)v % PGSIZE || v < end || v2p(v) >= PHYSTOP)
     panic("kfree");
-
+  free_list_current_size++;
   // Fill with junk to catch dangling refs.
   memset(v, 1, PGSIZE);
 
@@ -83,7 +87,7 @@
 kalloc(void)
 {
   struct run *r;
-
+  free_list_current_size--;
   if(kmem.use_lock)
     acquire(&kmem.lock);
   r = kmem.freelist;
@@ -94,3 +98,17 @@
   return (char*)r;
 }
 
+// int free_list_current_size(){
+//   struct run *r;
+// 	int len = 0;
+// 	if(kmem.use_lock)
+//     acquire(&kmem.lock);
+// 	r = kmem.freelist;
+//   while(r){
+// 		len++;
+// 		r = r->next;
+// 	}
+// 	if(kmem.use_lock)
+//     release(&kmem.lock);
+// 	return len;
+// }
Index: user.h
===================================================================
--- user.h	(revision 3)
+++ user.h	(working copy)
@@ -36,3 +36,4 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+char* itoa(int xx, char* buff);
Index: myMemTest.c
===================================================================
--- myMemTest.c	(revision 0)
+++ myMemTest.c	(revision 0)
@@ -0,0 +1,29 @@
+#include "types.h"
+#include "user.h"
+#define PGSIZE 4096
+#define N 10
+
+int main(){
+	int i, pid;
+	void **adds = malloc(N * sizeof(void*));
+  
+	
+	for(i = 0; i < N; i++){
+			adds[i] = 0;
+	}
+	
+	fork();
+	printf(1, "pid: %d\n", getpid());
+	for(i = 0; i < N; i++){
+			adds[i] = malloc(PGSIZE);
+			printf(1, "adds[%d] = %x\n", i, adds[i]);
+	}
+	pid = getpid();
+	for(i = 0; i < N; i++){
+			*((int*)adds[i]) = pid;
+	}
+	//printf(1, "pid: %d\n", pid);
+  wait();
+  exit();
+  return 0;
+}
\ No newline at end of file
Index: Makefile
===================================================================
--- Makefile	(revision 3)
+++ Makefile	(working copy)
@@ -75,6 +75,23 @@
 #CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
 CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+ifndef TRUE
+TRUE:=1
+endif
+
+ifndef FALSE
+FALSE:=0
+endif
+CFLAGS += "-DFALSE=$(FALSE)"
+CFLAGS += "-DTRUE=$(TRUE)"
+ifdef SELECTION
+CFLAGS += "-DSELECTION=$(SELECTION)"
+endif
+ifdef VERBOSE_PRINT
+CFLAGS += "-DVERBOSE_PRINT=$(VERBOSE_PRINT)"
+else
+CFLAGS += "-DVERBOSE_PRINT=FALSE"
+endif
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
 LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null)
@@ -164,6 +181,7 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_myMemTest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -233,7 +251,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c myMemTest.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
Index: fs.c
===================================================================
--- fs.c	(revision 3)
+++ fs.c	(working copy)
@@ -257,7 +257,7 @@
 struct inode*
 idup(struct inode *ip)
 {
-  acquire(&icache.lock);
+  acquire(&icache.lock); 
   ip->ref++;
   release(&icache.lock);
   return ip;
@@ -464,7 +464,6 @@
 {
   uint tot, m;
   struct buf *bp;
-
   if(ip->type == T_DEV){
     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
       return -1;
@@ -481,7 +480,7 @@
     m = min(n - tot, BSIZE - off%BSIZE);
     memmove(bp->data + off%BSIZE, src, m);
     log_write(bp);
-    brelse(bp);
+		brelse(bp);
   }
 
   if(n > 0 && off > ip->size){
@@ -605,12 +604,12 @@
 namex(char *path, int nameiparent, char *name)
 {
   struct inode *ip, *next;
-
-  if(*path == '/')
+  
+  if(*path == '/'){
     ip = iget(ROOTDEV, ROOTINO);
-  else
+  }else{
     ip = idup(proc->cwd);
-
+  }
   while((path = skipelem(path, name)) != 0){
     ilock(ip);
     if(ip->type != T_DIR){
@@ -622,6 +621,7 @@
       iunlock(ip);
       return ip;
     }
+    
     if((next = dirlookup(ip, name, 0)) == 0){
       iunlockput(ip);
       return 0;
Index: vm.c
===================================================================
--- vm.c	(revision 3)
+++ vm.c	(working copy)
@@ -7,10 +7,11 @@
 #include "proc.h"
 #include "elf.h"
 
+
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
 struct segdesc gdt[NSEGS];
-
+int retrieve_page(uint va);
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
@@ -42,37 +43,38 @@
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
-static pte_t *
+pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
   pde_t *pde;
   pte_t *pgtab;
-
+  
   pde = &pgdir[PDX(va)];
   if(*pde & PTE_P){
     pgtab = (pte_t*)p2v(PTE_ADDR(*pde));
-  } else {
+	} else{
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
       return 0;
+		//cprintf("walkpgdir alloc %x\n", (uint)pgtab);
     // Make sure all those PTE_P bits are zero.
     memset(pgtab, 0, PGSIZE);
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table 
     // entries, if necessary.
     *pde = v2p(pgtab) | PTE_P | PTE_W | PTE_U;
-  }
+	}
   return &pgtab[PTX(va)];
 }
 
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
   pte_t *pte;
-  
+	//cprintf("mappages %x\n", (uint)va);
   a = (char*)PGROUNDDOWN((uint)va);
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
   for(;;){
@@ -81,11 +83,14 @@
     if(*pte & PTE_P)
       panic("remap");
     *pte = pa | perm | PTE_P;
-    if(a == last)
+    if(a == last){
+			//cprintf("break\n");
       break;
+		}
     a += PGSIZE;
     pa += PGSIZE;
   }
+  //cprintf("mappages out\n");
   return 0;
 }
 
@@ -304,23 +309,29 @@
   *pte &= ~PTE_U;
 }
 
+
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
   pde_t *d;
-  pte_t *pte;
+  pte_t *pte, *dpte;
   uint pa, i;
   char *mem;
 
   if((d = setupkvm()) == 0)
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-      panic("copyuvm: pte should exist");
-    if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0){// page table not present
+      d[PDX(i)] = pgdir[PDX(i)];
+			i += (NPTENTRIES - 1) * PGSIZE;
+		}
+		if(!(*pte & PTE_P)){ // page not present
+      if((dpte = walkpgdir(pgdir, (void *) i, 1)) == 0)
+			  panic("copyuvm");
+			*dpte = *pte;
+		}
     pa = PTE_ADDR(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
@@ -335,6 +346,7 @@
   return 0;
 }
 
+
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
Index: exec.c
===================================================================
--- exec.c	(revision 3)
+++ exec.c	(working copy)
@@ -11,9 +11,10 @@
 exec(char *path, char **argv)
 {
   char *s, *last;
-  int i, off;
-  uint argc, sz, sp, ustack[3+MAXARG+1];
-  struct elfhdr elf;
+  int i, off, upages;
+  uint a, argc, sz, oldsz, sp, ustack[3+MAXARG+1];
+  uint queue[MAX_TOTAL_PAGES];
+	struct elfhdr elf;
   struct inode *ip;
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
@@ -31,7 +32,11 @@
 
   if((pgdir = setupkvm(kalloc)) == 0)
     goto bad;
-
+	
+	// reset paging metadata and pages queue
+	upages = 0;
+  for(i = 0; i < MAX_TOTAL_PAGES; i++)
+			queue[i] = KERNBASE;
   // Load program into memory.
   sz = 0;
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
@@ -41,8 +46,12 @@
       continue;
     if(ph.memsz < ph.filesz)
       goto bad;
+		oldsz = sz;
     if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
       goto bad;
+		a = PGROUNDUP(oldsz);
+    for(; a < sz; a += PGSIZE)
+		  queue[upages++] = a;
     if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
       goto bad;
   }
@@ -55,6 +64,7 @@
   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
     goto bad;
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+	queue[upages++] = (sz - PGSIZE); // user stack page
   sp = sz;
 
   // Push argument strings, prepare rest of stack in ustack.
@@ -85,6 +95,18 @@
   // Commit to the user image.
   oldpgdir = proc->pgdir;
   proc->pgdir = pgdir;
+	
+	for(i = 0; i < MAX_TOTAL_PAGES; i++){
+		//copy queue
+		proc->page_queue[i] = queue[i];
+	  //reset metadata
+		if(i < MAX_FILE_PAGES)
+	    proc->paging_metadata[i] = KERNBASE;
+	  //reset counters
+		proc->counters[i] = 0;
+  }
+			
+	proc->in_pages_num = upages;
   proc->sz = sz;
   proc->tf->eip = elf.entry;  // main
   proc->tf->esp = sp;
Index: mmu.h
===================================================================
--- mmu.h	(revision 3)
+++ mmu.h	(working copy)
@@ -139,6 +139,7 @@
 #define PTE_D           0x040   // Dirty
 #define PTE_PS          0x080   // Page Size
 #define PTE_MBZ         0x180   // Bits must be zero
+#define PTE_PG 					0x200   // Paged out to secondary storage
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
Index: string.c
===================================================================
--- string.c	(revision 3)
+++ string.c	(working copy)
@@ -1,6 +1,6 @@
 #include "types.h"
 #include "x86.h"
-
+#define ITOA_BASE 10
 void*
 memset(void *dst, int c, uint n)
 {
@@ -103,3 +103,35 @@
   return n;
 }
 
+char*
+itoa(int xx, char* buff)
+{
+  static char digits[] = "0123456789ABCDEF";
+  char tmp_buf[16];
+  int i, neg, j;
+  uint x;
+
+  neg = 0;
+  if(xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    tmp_buf[i++] = digits[x % ITOA_BASE];
+  }while((x /= ITOA_BASE) != 0);
+  if(neg)
+    tmp_buf[i++] = '-';
+  
+  j = 0;
+  while(--i >= 0)
+    buff[j++] = tmp_buf[i];
+  buff[j] = '\0';
+  return buff;
+}
+
+
+
Index: proc.c
===================================================================
--- proc.c	(revision 3)
+++ proc.c	(working copy)
@@ -3,10 +3,20 @@
 #include "param.h"
 #include "memlayout.h"
 #include "mmu.h"
+#include "fs.h"
+#include "file.h"
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "fcntl.h"
 
+// paging algorithms:
+#define FIFO 1
+// no paging
+#define NONE  2  
+
+// #define SELECTION FIFO
+
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
@@ -15,10 +25,17 @@
 static struct proc *initproc;
 
 int nextpid = 1;
+
 extern void forkret(void);
 extern void trapret(void);
-
+extern int sys_open(void);
+extern int free_list_initial_size;
+extern int free_list_current_size;
 static void wakeup1(void *chan);
+static int open_f(char *path, int omode);
+void clear_page_table();
+void remove_page(uint va);
+void add_page(uint va);
 
 void
 pinit(void)
@@ -26,7 +43,8 @@
   initlock(&ptable.lock, "ptable");
 }
 
-//PAGEBREAK: 32
+
+//PAGEBREAK: 32exit
 // Look in the process table for an UNUSED proc.
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
@@ -36,6 +54,7 @@
 {
   struct proc *p;
   char *sp;
+	int i;
 
   acquire(&ptable.lock);
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
@@ -45,12 +64,13 @@
   return 0;
 
 found:
+
   p->state = EMBRYO;
   p->pid = nextpid++;
   release(&ptable.lock);
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if((p->kstack = kalloc()) == 0){// released in wait
     p->state = UNUSED;
     return 0;
   }
@@ -69,7 +89,25 @@
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
+  
+  // initiate process's page_meta_data and pagefile
+  for(i = 0; i < MAX_FILE_PAGES; i++){
+		 p->paging_metadata[i] = KERNBASE;
+	}
 
+  for(i = 0; i < MAX_TOTAL_PAGES; i++){
+	  p->page_queue[i] = KERNBASE;
+	}
+	
+	for(i = 0; i < MAX_TOTAL_PAGES; i++){
+	  p->counters[i] = 0;
+	}
+	
+  p->pagefilefd = -1;
+	p->in_pages_num = 0;
+	p->out_pages_num = 0;
+	p->page_fault_num = 0;
+	p->total_page_out = 0;
   return p;
 }
 
@@ -80,12 +118,13 @@
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
-  
   p = allocproc();
   initproc = p;
   if((p->pgdir = setupkvm(kalloc)) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+	p->page_queue[0] = 0;
+	p->in_pages_num++;
   p->sz = PGSIZE;
   memset(p->tf, 0, sizeof(*p->tf));
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
@@ -102,18 +141,31 @@
   p->state = RUNNABLE;
 }
 
-// Grow current process's memory by n bytes.
-// Return 0 on success, -1 on failure.
 int
 growproc(int n)
 {
-  uint sz;
+  uint sz, a, newsz, oldsz;
+	pte_t *pte;
   
   sz = proc->sz;
   if(n > 0){
+		newsz = sz + n;
+		a = PGROUNDUP(sz);
     if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
       return -1;
+		for(; a < newsz; a += PGSIZE){
+				add_page(a);
+		}
   } else if(n < 0){
+		oldsz = sz;
+		a = PGROUNDUP(sz+n);
+		for(; a  < oldsz; a += PGSIZE){
+		  pte = walkpgdir(proc->pgdir, (char*)a, 0);
+      if(!pte)
+        a += (NPTENTRIES - 1) * PGSIZE;
+      else if((*pte & PTE_P) != 0)
+			  remove_page(a);
+		}
     if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
@@ -122,6 +174,11 @@
   return 0;
 }
 
+// implemented below
+int copy_parent_file(struct proc *np);
+int open_child_file(struct proc *np);
+pde_t* proc_copyuvm();
+
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
@@ -134,25 +191,64 @@
   // Allocate process.
   if((np = allocproc()) == 0)
     return -1;
-
-  // Copy process state from p.
+	
+// 	if((strncmp("init", proc->name, 16) == 0) || (strncmp("sh", proc->name, 16) == 0)){
+//     // Copy process state from p.
+//     if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
+//       kfree(np->kstack);
+//       np->kstack = 0;
+//       np->state = UNUSED;
+//       return -1;
+//     }
+// 	}else{
+// 		// Copy process state from p.
+//     if((np->pgdir = proc_copyuvm()) == 0){
+//       kfree(np->kstack);
+//       np->kstack = 0;
+//       np->state = UNUSED;
+//       return -1;
+//     }
+// 	}
+// 		
+	// Copy process state from p.
   if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
     return -1;
   }
+  // copy parent's queue
+  for(i = 0; i < MAX_TOTAL_PAGES; i++){
+			np->page_queue[i] = proc->page_queue[i];
+			np->counters[i] = proc->counters[i];
+	}
+	np->in_pages_num = proc->in_pages_num; // num of physical pages
+	
   np->sz = proc->sz;
   np->parent = proc;
   *np->tf = *proc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
-
+	
+	// open child's pagefile
+	// the file is in parent's cwd
+	if(namecmp("init", proc->name) != 0){
+	  if(open_child_file(np) < 0)
+			 return -1;
+	}
+	
+  // duplicate all files
+	// np has its own pagefile
   for(i = 0; i < NOFILE; i++)
     if(proc->ofile[i])
       np->ofile[i] = filedup(proc->ofile[i]);
   np->cwd = idup(proc->cwd);
+	
+	if((strncmp("init", proc->name, 16) != 0) && (strncmp("sh", proc->name, 16) != 0)){		
+	  if(copy_parent_file(np) < 0)
+			 return -1;
+	}
  
   pid = np->pid;
   np->state = RUNNABLE;
@@ -160,6 +256,19 @@
   return pid;
 }
 
+// close page file
+// return 0 for success and -1 for failure
+int close_f(){
+  int fd = proc->pagefilefd;
+  struct file *f; 
+  if(fd < 0 || fd >= NOFILE || (f=proc->ofile[fd]) == 0)
+    return -1;
+  proc->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int proc_unlink(char *path);
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
@@ -169,9 +278,19 @@
   struct proc *p;
   int fd;
 
+	if(VERBOSE_PRINT == TRUE){
+    cprintf(" %d% free pages in the system\n", ((free_list_current_size * 100) / free_list_initial_size));
+	}
+  
   if(proc == initproc)
     panic("init exiting");
-
+  
+	// delete pagefile
+  if((strncmp("init", proc->name, 16) != 0) && (strncmp("sh", proc->name, 16) != 0)){
+			if(proc_unlink(proc->pagefilename) < 0)
+					panic("unlink failed"); 
+	}
+	
   // Close all open files.
   for(fd = 0; fd < NOFILE; fd++){
     if(proc->ofile[fd]){
@@ -196,9 +315,11 @@
         wakeup1(initproc);
     }
   }
-
+  
   // Jump into the scheduler, never to return.
   proc->state = ZOMBIE;
+  
+  //cprintf("%d ended gracefully\n", proc->pid);
   sched();
   panic("zombie exit");
 }
@@ -443,6 +564,7 @@
 void
 procdump(void)
 {
+
   static char *states[] = {
   [UNUSED]    "unused",
   [EMBRYO]    "embryo",
@@ -451,7 +573,7 @@
   [RUNNING]   "run   ",
   [ZOMBIE]    "zombie"
   };
-  int i;
+  int i, allocated_mem, precent = 0, current = 0, initial = 0;
   struct proc *p;
   char *state;
   uint pc[10];
@@ -464,6 +586,8 @@
     else
       state = "???";
     cprintf("%d %s %s", p->pid, state, p->name);
+		allocated_mem = p->in_pages_num + p->out_pages_num;
+		cprintf(" %d %d %d %d", allocated_mem, p->out_pages_num, p->page_fault_num, p->total_page_out);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
@@ -471,6 +595,450 @@
     }
     cprintf("\n");
   }
+  current = free_list_current_size;
+	initial = free_list_initial_size;
+	precent = (current*100)/initial;
+	//cprintf("current %d\n", current);
+  cprintf("%d % free pages in the system\n", precent);
 }
 
 
+/************************************************* MEMORY MANAGEMENT ************************************************************************************/
+
+
+// each process is responsible for paging in and out its own pages 
+// find available page-sized place in pagefile
+// return index in paging_meta_data or -1 if no such
+int find_free_file_index(){
+  int i;	
+  for(i = 0; i < MAX_FILE_PAGES; i++){
+	  if(proc->paging_metadata[i] == KERNBASE)
+		  return i;
+  }
+  return -1; // error
+}
+
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(proc->ofile[fd] == 0){
+      proc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+
+  uint off;
+  struct inode *ip; 
+  char name[DIRSIZ];
+  struct inode *dp;
+  if((dp = nameiparent(path, name)) == 0)
+    return 0; 
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, &off)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+int
+open_f(char *path, int omode)
+{
+  int fd;
+  struct file *f;
+  struct inode *ip;
+  if(omode & O_CREATE){
+    begin_trans();
+    ip = create(path, T_FILE, 0, 0);
+    commit_trans();
+    if(ip == 0)
+      return -1;
+  } else {
+    if((ip = namei(path)) == 0)
+      return -1;
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    return -1;
+  }
+  iunlock(ip);
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+    
+}
+
+// find the index in paging_metadata that
+// correspond to given virtual address
+int find_file_index(uint va){
+  uint pte_add = va & ~((uint)0xFFF);
+	int i;
+	for(i = 0; i < MAX_FILE_PAGES; i++){
+	  if(proc->paging_metadata[i] == pte_add)
+		  return i;
+	}
+	return -1;
+}
+
+// add page to pages queue
+// recieve user address of page 
+void add_page(uint va){
+  int index = 0;
+	if(proc->in_pages_num >= MAX_PSYC_PAGES){
+		 //make room for new page in physical memory
+		 clear_page_table();
+	}
+	// insert new page to queue 
+	while(index < MAX_TOTAL_PAGES && proc->page_queue[index] != KERNBASE){
+			index++;
+	}
+	if(index == MAX_TOTAL_PAGES)
+			panic("full page table");
+	//cprintf("add_page insert to queue at %d\n", index);
+	proc->page_queue[index] = (va & ~(uint)0xFFF);
+	proc->in_pages_num += 1;
+	// zero counter
+	proc->counters[index] = 0;
+}
+
+void remove_page(uint va){
+		int index = 0;
+		int v = (va & (~(uint)0xFFF));
+		// find in queue
+		while(index < MAX_TOTAL_PAGES && (proc->page_queue[index] != v)){
+		  index++;
+		}
+		if(index == MAX_TOTAL_PAGES)
+				panic("page not in queue");
+		// page in queue at index
+		//cprintf("found %x in queue\n", v);
+		index++;
+		while(index < MAX_TOTAL_PAGES && proc->page_queue[index] != KERNBASE){
+		  proc->page_queue[index-1] = proc->page_queue[index];
+			proc->counters[index-1] = proc->counters[index]; 
+			index++;
+		}
+		proc->page_queue[index-1] = KERNBASE;
+		proc->counters[index-1] = 0;
+		proc->in_pages_num -= 1; 
+}				
+
+// assume pagefile allready allocated
+int copy_page_to_file(uint va){
+	// offset of free page in process's pagefile
+  int offset = find_free_file_index();  	
+  char* pa = uva2ka(proc->pgdir, (char*)va);
+	struct file* f = proc->ofile[proc->pagefilefd];
+  // cprintf("in copy_page_to_file\n");
+  // write buff to file
+	f->off = offset * PGSIZE;
+	if(filewrite(f, pa, PGSIZE) < 0)
+			return -1; 
+	// set offset to zero (12 least significant bit) 
+  proc->paging_metadata[offset] = va & ~((uint)0xFFF); 
+  return 0; // success
+}
+// 
+// recieve virtual address and store the page correspond
+// to that address in pagefile
+// remove this page from page table
+// assume there is free space in pagefile 
+// va must be present
+int page_out(uint va){
+	pte_t *pte;
+	char *v;
+	//cprintf("in page_out: %x pid: %d\n", va, proc->pid);
+	// check if page table present and user's page
+	if((pte = walkpgdir(proc->pgdir, (void*)va, 0)) == 0)
+			return -1;
+	if((*pte & PTE_P) && (*pte & PTE_U)){
+			//cprintf("start page_out(%x) pid %d\n", va, proc->pid);
+			remove_page(va); // remove from queue
+			copy_page_to_file(va);
+			*pte = *pte & (~(uint)PTE_P); // not present
+			*pte = *pte | PTE_PG; // Paged out to secondary storage
+			// Free the page of physical memory pointed at by v
+			v = p2v(PTE_ADDR(*pte));
+			kfree(v);
+			proc->out_pages_num++;
+			proc->total_page_out++;
+			//pte = walkpgdir(proc->pgdir, (void*)va, 0);
+			//cprintf("check page_out(%d)\n", (*pte & PTE_P));
+			return 0;
+	}
+	//cprintf("page not present %x\n", va); 
+	return -1; // physical mem not present!
+}
+
+int get_lowest_count(){
+  int lowest_index = 0;
+	int iter;
+	
+	for(iter = 1; iter < proc->in_pages_num; iter++){
+	  if(proc->counters[iter] < proc->counters[lowest_index])
+		  lowest_index = iter;
+	}
+	return proc->page_queue[lowest_index];
+}
+
+void clear_page_table(){
+	uint va;		
+	if((strncmp("init", proc->name, 16) == 0) || (strncmp("sh", proc->name, 16) == 0)){
+			return; // no paging for init and shell processes
+	}
+  #ifdef SELECTION
+		if(SELECTION == FIFO){
+		  //cprintf("SELECTION == FIFO\n");
+			while(proc->in_pages_num >= 15){
+			  va = proc->page_queue[0]; // take first in 
+        if(va == KERNBASE)
+			  	panic("clear page table error");
+			  if(page_out(va) < 0)
+					panic("page out failed\n");
+			}
+	  }else if(SELECTION == NONE){
+			//cprintf("SELECTION == NONE\n");		// ignore			
+    }
+  #else
+    //cprintf("SELECTION == NFU\n");   
+		// select page with lowest counter
+		va = get_lowest_count();
+		if(page_out(va) < 0)
+					panic("page out failed\n");
+						
+  #endif /* SELECTION */
+}
+
+// page in 
+int retrieve_page(uint va){
+  int index, len;
+  char content[PGSIZE];
+	pte_t *pte;
+	char *mem; // for pte alloc if needed 
+	struct file* f;
+	//cprintf("in retrieve va: %x pid: %d\n", va, proc->pid);
+	//retrieve_page called whenever page fauld occur
+	proc->page_fault_num++;
+  
+//   pde = &proc->pgdir[PDX(va)];
+//   if(*pde & PTE_P){// present
+//     pte = (pte_t*)p2v(PTE_ADDR(*pde));
+// 	} else if(*pde & PTE_PG){ //paged out
+// 	    retrieve_page((uint)p2v(PTE_ADDR(*pde)));
+// 			pte = (pte_t*)p2v(PTE_ADDR(*pde));
+// 	}else{
+// 			panic("page table don't exist");
+// 	}
+	if((pte = walkpgdir(proc->pgdir, (void*)va, 1)) == 0)
+	  panic("page table don't exist");
+	//cprintf("is pt present? %d\n", *pte & PTE_P);
+	if(!(*pte & PTE_PG))
+	  panic("wasn't paged out");
+	if(*pte & PTE_P)
+			panic("already present");
+	
+	f = proc->ofile[proc->pagefilefd];
+	if((index = find_file_index(va)) < 0)
+	  panic("retrieve: page not in pagefile");
+	//cprintf("retrieve call add %x\n", va);
+  
+	if((mem = kalloc()) == 0) // released in page_out or freevm
+			panic("retrieve: memory allocation failure");
+  memset(mem, 0, PGSIZE);
+	*pte = v2p(mem) | PTE_P|PTE_W|PTE_U;
+  *pte = *pte & ~(uint)PTE_PG; // set flag to zero
+  proc->out_pages_num--;
+  add_page(va);
+	f->off = index * PGSIZE;	
+	if((len = fileread(f, mem, PGSIZE)) < 0)
+			panic("retrieve: reading file failure");
+	
+	// empty file
+	memset(content, 0, PGSIZE);
+	f->off = index * PGSIZE;
+	if((len = filewrite(f, content, PGSIZE)) < 0)
+			panic("retrieve: write failed");
+	return 0;
+}
+
+
+int open_child_file(struct proc *np){
+	char pid_string[DIRSIZ];
+  int flags = (O_RDWR | O_CREATE);
+  // create pagefile's name: "page<pid>"  
+	np->pagefilename[0] = 'p';
+	np->pagefilename[1] = 'a';
+	np->pagefilename[2] = 'g';
+	np->pagefilename[3] = 'e';
+	np->pagefilename[4] = '\0';
+	itoa(np->pid, pid_string);
+	// concate pid num to filename
+	memmove(np->pagefilename + strlen(np->pagefilename), pid_string, strlen(pid_string));
+	np->pagefilefd = open_f(np->pagefilename, flags);
+	return np->pagefilefd;
+}
+
+
+// for fork use:  The forked process should have its own page file which is identical to the parent's file.
+int copy_parent_file(struct proc *np){
+  int i;
+	struct file *procf, *npf;
+	char page[PGSIZE*MAX_FILE_PAGES];
+	int bytes = 0;
+	
+	procf = proc->ofile[proc->pagefilefd];
+	npf = np->ofile[np->pagefilefd];
+	memset(page, 0, PGSIZE);
+	
+	for(i = 0; i < MAX_FILE_PAGES; i++){
+	 	np->paging_metadata[i] = proc->paging_metadata[i];
+	}
+	procf->off = 0;
+	npf->off = 0;
+	bytes = fileread(procf, page, procf->ip->size);
+	if(bytes < 0)
+			return -1; // failed reading parent's file
+	if(filewrite(npf, page, bytes) != bytes)
+			return -1; // error in copy
+	memset(page, 0, bytes); // clean 
+
+  return 0; // success
+}
+
+// Is the directory dp empty except for "." and ".." ?
+static int
+isdirempty(struct inode *dp)
+{
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("isdirempty: readi");
+    if(de.inum != 0)
+      return 0;
+  }
+  return 1;
+}
+
+int
+proc_unlink(char *path)
+{
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ];
+  uint off;
+
+  if((dp = nameiparent(path, name)) == 0)
+    return -1;
+
+  begin_trans();
+
+  ilock(dp);
+
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    iunlockput(ip);
+    goto bad;
+  }
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+    dp->nlink--;
+    iupdate(dp);
+  }
+  iunlockput(dp);
+
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+
+  commit_trans();
+
+  return 0;
+
+bad:
+  iunlockput(dp);
+  commit_trans();
+  return -1;
+}
+// called at clock tick trap
+int update_counters(){
+		int i;
+		pte_t *pte;
+		uint va;
+		//cprintf("upd\n");
+		for(i = 0; i < proc->in_pages_num; i++){
+			va = proc->page_queue[i];
+		  if((pte = walkpgdir(proc->pgdir, (void*)va, 0)) == 0)
+			  return -1;
+		  if(!(*pte & PTE_P) || (*pte & PTE_PG))
+				panic("should be present");
+		  proc->counters[i] = (proc->counters[i] >> 1); // shift right
+	  	if(*pte & PTE_A){// accessed
+        proc->counters[i] = proc->counters[i] | MSB; // set msb 
+				*pte = *pte & ~(uint)PTE_A; // zero bit
+		  }			
+    }
+    return 0;
+}
Index: trap.c
===================================================================
--- trap.c	(revision 3)
+++ trap.c	(working copy)
@@ -13,7 +13,8 @@
 extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
-
+// proc.c
+int update_counters();
 void
 tvinit(void)
 {
@@ -45,6 +46,12 @@
       exit();
     return;
   }
+  if(tf->trapno == T_PGFLT){
+		proc->tf = tf;	
+		//cprintf("caught PGFLT trap, page %x\n", rcr2());
+		retrieve_page(rcr2());
+		return;
+	}
 
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
@@ -55,6 +62,9 @@
       release(&tickslock);
     }
     lapiceoi();
+		if(proc && (strncmp("init", proc->name, 16) != 0) && (strncmp("sh", proc->name, 16) != 0) && (update_counters() < 0)){
+				panic("failed update counters");
+		}
     break;
   case T_IRQ0 + IRQ_IDE:
     ideintr();
Index: proc.h
===================================================================
--- proc.h	(revision 3)
+++ proc.h	(working copy)
@@ -1,6 +1,19 @@
 // Segments in proc->gdt.
 #define NSEGS     7
+// restrictions on page table
+#define MAX_PSYC_PAGES 15
+// assumption: any given user process will not 
+// require more than MAX_TOTAL_PAGES 
+// pages (the shell and init
+// should not be included)
+#define MAX_TOTAL_PAGES 30
+#define MAX_FILE_PAGES (MAX_TOTAL_PAGES - MAX_PSYC_PAGES)
+#define DIRSIZ 14
+#define T_DIR 1
+#define T_FILE 2
 
+#define MSB 0x40000000
+
 // Per-CPU state
 struct cpu {
   uchar id;                    // Local APIC ID; index into cpus[] below
@@ -56,6 +69,11 @@
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
+  int in_pages_num;							 // Number of pages in physical memory
+  int out_pages_num;
+	int page_fault_num;
+	int total_page_out;
+	int initial_free_pages;
   pde_t* pgdir;                // Page table
   char *kstack;                // Bottom of kernel stack for this process
   enum procstate state;        // Process state
@@ -68,6 +86,13 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+	
+  char pagefilename[DIRSIZ];		 				// name of process's page file (which include all pages that has no room in physical memory)
+  int pagefilefd;
+  uint paging_metadata[MAX_FILE_PAGES];  // virtual addresses of pages in pagefile
+  uint page_queue[MAX_TOTAL_PAGES];	// for FIFO paging algorithm 
+
+	int counters[MAX_TOTAL_PAGES];		// for aging algorithm	- one for each user page in pysical memory		
 };
 
 // Process memory is laid out contiguously, low addresses first:
Index: file.c
===================================================================
--- file.c	(revision 3)
+++ file.c	(working copy)
@@ -96,7 +96,6 @@
 fileread(struct file *f, char *addr, int n)
 {
   int r;
-
   if(f->readable == 0)
     return -1;
   if(f->type == FD_PIPE)
Index: defs.h
===================================================================
--- defs.h	(revision 3)
+++ defs.h	(working copy)
@@ -116,6 +116,7 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int 						retrieve_page(uint va);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -137,7 +138,7 @@
 int             strlen(const char*);
 int             strncmp(const char*, const char*, uint);
 char*           strncpy(char*, const char*, int);
-
+char*  		itoa(int xx, char* buff);
 // syscall.c
 int             argint(int, int*);
 int             argptr(int, char**, int);
@@ -176,6 +177,7 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
-
+uint*					walkpgdir(pde_t *pgdir, const void *va, int alloc);
+int							mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
Index: ulib.c
===================================================================
--- ulib.c	(revision 3)
+++ ulib.c	(working copy)
@@ -3,7 +3,7 @@
 #include "fcntl.h"
 #include "user.h"
 #include "x86.h"
-
+#define ITOA_BASE 10
 char*
 strcpy(char *s, char *t)
 {
@@ -103,3 +103,34 @@
     *dst++ = *src++;
   return vdst;
 }
+
+char*
+itoa(int xx, char* buff)
+{
+  static char digits[] = "0123456789ABCDEF";
+  char tmp_buf[16];
+  int i, neg, j;
+  uint x;
+
+  neg = 0;
+  if(xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    tmp_buf[i++] = digits[x % ITOA_BASE];
+  }while((x /= ITOA_BASE) != 0);
+  if(neg)
+    tmp_buf[i++] = '-';
+  
+  j = 0;
+  while(--i >= 0)
+    buff[j++] = tmp_buf[i];
+  buff[j] = '\0';
+  return buff;
+}
+

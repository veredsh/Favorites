Index: console.c
===================================================================
--- console.c	(revision 1)
+++ console.c	(working copy)
@@ -192,6 +192,9 @@
   acquire(&input.lock);
   while((c = getc()) >= 0){
     switch(c){
+    case C('C'):  // terminate
+      kbd_sigint(); // implemented on proc.c
+      break;
     case C('P'):  // Process listing.
       procdump();
       break;
Index: user.h
===================================================================
--- user.h	(revision 1)
+++ user.h	(working copy)
@@ -22,12 +22,15 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int signal(int signum, void (*handler)(void));
+int sigsend(int pid, int signum);
 
 // ulib.c
 int stat(char*, struct stat*);
 char* strcpy(char*, char*);
 void *memmove(void*, void*, int);
 char* strchr(const char*, char c);
+char* strtok(char * str, char * delimiters);
 int strcmp(const char*, const char*);
 void printf(int, char*, ...);
 char* gets(char*, int max);
@@ -36,3 +39,4 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+
Index: Makefile
===================================================================
--- Makefile	(revision 1)
+++ Makefile	(working copy)
@@ -164,6 +164,7 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_sanity\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -233,7 +234,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c sanity.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
Index: sanity.c
===================================================================
--- sanity.c	(revision 0)
+++ sanity.c	(revision 0)
@@ -0,0 +1,110 @@
+#include "types.h"
+#include "user.h"
+
+
+#define NUM_OF_CHILDS 3
+#define STDOUT 1
+#define HALF_SECOND 50
+#define SIGINT	  0
+#define SIGUSR1	  1
+#define SIGUSR2	  2
+#define SIGCHLD	  3
+void 
+sigchldHandler(void)
+{
+	printf(STDOUT, "child died\n");
+}
+
+void 
+sigfourHandler(void)
+{
+	printf(STDOUT, "ouch %d\n", getpid());
+}
+
+void
+kill_children(int pids[NUM_OF_CHILDS])
+{
+	int i;
+	for(i = 0; i < NUM_OF_CHILDS; i++){
+		sigsend(pids[i], SIGINT);
+	}
+}
+
+int 
+main(void)
+{
+	int child_pid[NUM_OF_CHILDS];
+	int i;
+	int pid; // fork answer
+	int id; // user input
+	int sig; // user input
+	int is_dead[NUM_OF_CHILDS];
+	int died = 0; // counter
+	
+	// no one is dead yet
+	for(i = 0; i < NUM_OF_CHILDS; i++)
+	{
+		is_dead[i] = 0;
+	}
+	
+	char *buf = malloc(sizeof(int)+1);
+	// register handler
+// 	signal(SIGCHLD, sigchldHandler);
+
+// 	printf(1, "sigchldHandler adrr: %d\n",(uint)sigchldHandler);
+	
+	for(i = 0; i < NUM_OF_CHILDS; i++)
+	{
+		if((pid = fork()) == 0)
+		{
+			signal(4, sigfourHandler);
+			for(; ;)
+			{
+				sleep(HALF_SECOND); // should be half a second
+			}
+			// Child's code
+			exit(); // so that won't execute loop 
+		}
+		 // Parent's code
+			child_pid[i] = pid;
+	}
+ 	while(died < NUM_OF_CHILDS)
+	
+	{
+		printf(STDOUT, "Enter a child id (0 â€“ 2):\n");
+		gets(buf, sizeof(int));
+		id = atoi(buf);
+		if(id < 0 || id > (NUM_OF_CHILDS - 1))
+		{
+			printf(STDOUT, "wrong id number\n");
+			kill_children(child_pid);
+			exit();
+		}
+		
+		printf(STDOUT, "Which signal to send:\n");
+		gets(buf, sizeof(int));
+		sig = atoi(buf);
+		if(sig < 0 || sig > 31)
+		{
+			printf(STDOUT, "wrong signal number\n");
+			kill_children(child_pid);
+			exit();
+		} 
+		
+		sigsend(child_pid[id], sig);
+		
+		if(sig == SIGINT && is_dead[id] == 0){// first time send SIGINT
+		  wait();
+		  is_dead[id] = 1;
+		  died += 1;
+		}
+		
+		sleep(HALF_SECOND);
+
+	}
+ 	printf(STDOUT, "good bye\n");
+	free(buf);
+// 	
+	exit();
+}
+
Index: sh.c
===================================================================
--- sh.c	(revision 1)
+++ sh.c	(working copy)
@@ -66,7 +66,6 @@
 
   if(cmd == 0)
     exit();
-  
   switch(cmd->type){
   default:
     panic("runcmd");
@@ -131,9 +130,9 @@
 }
 
 int
-getcmd(char *buf, int nbuf)
+getcmd(char *buf, int nbuf, char *path)
 {
-  printf(2, "$ ");
+  printf(2, "%s> ", path);
   memset(buf, 0, nbuf);
   gets(buf, nbuf);
   if(buf[0] == 0) // EOF
@@ -141,12 +140,59 @@
   return 0;
 }
 
+void
+updatePath(char *path, char *buf)
+{
+	char *tmp = 0;
+	char *dir = 0;
+	int i;
+	
+	if(strcmp(buf+3, "/") == 0){
+		path[0] = '/';
+		i = 1;
+		while(path[i] != '\0')
+		{
+			path[i] = '\0'; 
+			i++;
+		}
+		return;
+	}
+	
+	dir = strtok(buf+3, "/"); // split 
+	
+	while (dir){
+	  tmp = path + strlen(path); // point to end of path
+	  if (strlen(dir) > 1 && dir[0] == '.' && dir[1] == '.')
+	  {// go backward
+	    *(--tmp) = '\0'; 
+	     // chop child directory
+	    while (*(tmp-1) != '/')
+	    {
+		*(--tmp) = '\0';
+	    }
+	  }
+	  else if (strlen(dir) != 1 || dir[0] != '.') // <=> !(strlen(dir) == 1 && dir[0] == '.') which does nothing
+	  {
+		strcpy(tmp, dir);
+		path[strlen(path)] = '/';
+	  }
+	  
+	  dir = strtok(0, "/");
+	}
+}
+
+
 int
 main(void)
 {
   static char buf[100];
   int fd;
+  char path[256];
   
+  //initialize path to root
+  path[0] = '/';
+  path[1] = '\0'; // null terminate
+  
   // Assumes three file descriptors open.
   while((fd = open("console", O_RDWR)) >= 0){
     if(fd >= 3){
@@ -156,13 +202,15 @@
   }
   
   // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
+  while(getcmd(buf, sizeof(buf), path) >= 0){
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
       // Clumsy but will have to do for now.
       // Chdir has no effect on the parent if run in the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
+      buf[strlen(buf)-1] = '\0';  // chop \n
       if(chdir(buf+3) < 0)
         printf(2, "cannot cd %s\n", buf+3);
+      else // Change path value
+	updatePath(path, buf);
       continue;
     }
     if(fork1() == 0)
Index: syscall.c
===================================================================
--- syscall.c	(revision 1)
+++ syscall.c	(working copy)
@@ -98,6 +98,8 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_signal(void);
+extern int sys_sigsend(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +123,8 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_signal]  sys_signal,
+[SYS_sigsend]  sys_sigsend,
 };
 
 void
Index: syscall.h
===================================================================
--- syscall.h	(revision 1)
+++ syscall.h	(working copy)
@@ -21,3 +21,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+
+#define SYS_signal 22
+#define SYS_sigsend 23
Index: usys.S
===================================================================
--- usys.S	(revision 1)
+++ usys.S	(working copy)
@@ -29,3 +29,7 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(signal)
+SYSCALL(sigsend)
+
+
Index: sysproc.c
===================================================================
--- sysproc.c	(revision 1)
+++ sysproc.c	(working copy)
@@ -88,3 +88,40 @@
   release(&tickslock);
   return xticks;
 }
+
+// return 0 for success and -1 for failure 
+int
+sys_signal(void)
+{
+  int signum;
+  char* handler = 0;
+  
+  if(argint(0, &signum) < 0 || 
+	  argptr(1, &handler, sizeof(sighandler_t)) < 0) 
+    return -1;
+  
+  if(signum < 0 || signum > 31)
+    return -1; // no such signal number
+  
+  return signal(signum, (sighandler_t)handler);
+}
+
+// return 0 for success and -1 for failure
+
+int 
+sys_sigsend(void)
+{
+  int pid;
+  int signum;
+  
+  if(argint(0, &pid) < 0 || argint(1, &signum) < 0)
+    return -1;
+  if(signum < 0 || signum > 31)
+    return -1;
+  
+  return sigsend(pid, signum);
+}
+  
+
+
+
Index: proc.c
===================================================================
--- proc.c	(revision 1)
+++ proc.c	(working copy)
@@ -18,14 +18,68 @@
 extern void forkret(void);
 extern void trapret(void);
 
+
 static void wakeup1(void *chan);
 
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+
 void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
 }
 
+
+int
+signal(int signum, sighandler_t handlerFunc)
+{
+ // cprintf("pid is: %d handlerFunc is: %d\n",proc->pid,(uint)handlerFunc);
+  proc->handler[signum] = handlerFunc;
+  proc->signal_ignore[signum] = 1;  
+  return 0;
+}
+
+// get old signal value and signla number
+// return new signal value
+uint 
+getNewSignal(int oldsig, int signum)
+{
+  uint bit = 1;
+  int i;
+    
+  for (i = 0; i < signum; i++)
+    bit = bit * 2;
+  
+  return (oldsig | bit);
+}
+
+int 
+sigsend(int pid, int signum)
+{
+//   cprintf("SIGSEND\n"); 
+// cprintf("send %d to %d from %d\n", signum,pid, proc->pid);
+  struct proc *p;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid){
+      p->signal = getNewSignal(p->signal, signum);
+//       cprintf("the new signal mask is: %d\n", p->signal);
+      release(&ptable.lock);
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}    
+
+
 //PAGEBREAK: 32
 // Look in the process table for an UNUSED proc.
 // If found, change state to EMBRYO and initialize
@@ -70,6 +124,14 @@
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
+  p->signal = 0; // No pending signals
+  // Set signals' handler to SIG_IGN
+  int i;
+  for(i = 0; i < MAXSIG; i++){
+    p->signal_ignore[i] = 0;
+    p->handler[i] = 0;
+  }
+  
   return p;
 }
 
@@ -145,6 +207,12 @@
   np->sz = proc->sz;
   np->parent = proc;
   *np->tf = *proc->tf;
+  
+  // copy signals' handlers
+  for(i = 0; i < MAXSIG; i++){
+    np->handler[i] = proc->handler[i];
+    np->signal_ignore[i] = proc->signal_ignore[i];
+  }
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -183,11 +251,15 @@
   iput(proc->cwd);
   proc->cwd = 0;
 
+  
+  // Inform parent of child exit
+  if(sigsend(proc->parent->pid, SIGCHLD) < 0)
+    panic("error in sending SIGCHLD");
+  
   acquire(&ptable.lock);
-
   // Parent might be sleeping in wait().
   wakeup1(proc->parent);
-
+ 
   // Pass abandoned children to init.
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
     if(p->parent == proc){
@@ -249,6 +321,7 @@
 void
 register_handler(sighandler_t sighandler)
 {
+// cprintf("in register_handler\n");
   char* addr = uva2ka(proc->pgdir, (char*)proc->tf->esp);
   if ((proc->tf->esp & 0xFFF) == 0)
     panic("esp_offset == 0");
@@ -275,7 +348,8 @@
 scheduler(void)
 {
   struct proc *p;
-
+  int sig_i;
+  uint bit = 1;
   for(;;){
     // Enable interrupts on this processor.
     sti();
@@ -290,11 +364,48 @@
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       proc = p;
-      switchuvm(p);
+      
+      // handle process's signals
+      if ((p->signal & (uint)1) != 0){
+	      if (!p->signal_ignore[SIGINT]){
+		p->killed = 1;
+	      }
+	      else{
+	        register_handler(p->handler[SIGINT]);
+	      }
+      }
+      if ((p->signal & (uint)2) != 0){
+	      if (!p->signal_ignore[SIGUSR1]){
+		cprintf("SIGUSR1 %d\n", p->pid);
+	      }
+	      else{
+	        register_handler(p->handler[SIGUSR1]);
+	      }
+      }
+      if ((p->signal & (uint)4) != 0){
+	      if (!p->signal_ignore[SIGUSR2]){
+		cprintf("SIGUSR2 %d\n", p->pid);
+	      }
+	      else{
+	        register_handler(p->handler[SIGUSR2]);
+	      }
+      }
+      
+      bit = 8;
+      for(sig_i = 3; sig_i < MAXSIG; sig_i++)
+      {
+	if(((p->signal & bit) != 0) && (p->signal_ignore[sig_i])){
+// 		cprintf("hhhhhhhhhhhhhhhhhhhhhhh %d\n", p->signal);
+	  register_handler(p->handler[sig_i]);
+	}
+	bit = bit * 2;
+      }
+      
+      p->signal = 0; // unsend signals
+      switchuvm(p);// switches to the processâ€™s page table
       p->state = RUNNING;
-      swtch(&cpu->scheduler, proc->context);
+      swtch(&cpu->scheduler, proc->context);// saves and restores register sets - start execute new till next context switch
       switchkvm();
-
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
@@ -463,7 +574,7 @@
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %s %s %d", p->pid, state, p->name, p->signal);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
@@ -473,4 +584,19 @@
   }
 }
 
+// Keyboard sigint handler
+// Called from console
+void
+kbd_sigint(void)
+{	
+  struct proc *p;
 
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(strcmp(p->name, "sh") != 0 && strcmp(p->name, "init") != 0)
+    {
+	    p->killed = 1;
+    }
+  }
+  release(&ptable.lock);
+}
Index: proc.h
===================================================================
--- proc.h	(revision 1)
+++ proc.h	(working copy)
@@ -1,6 +1,11 @@
 // Segments in proc->gdt.
 #define NSEGS     7
-
+// max number of signals
+#define MAXSIG	 32
+#define SIGINT	  0
+#define SIGUSR1	  1
+#define SIGUSR2	  2
+#define SIGCHLD	  3
 // Per-CPU state
 struct cpu {
   uchar id;                    // Local APIC ID; index into cpus[] below
@@ -26,7 +31,7 @@
 // %gs segment register so that %gs refers to the memory
 // holding those two variables in the local cpu's struct cpu.
 // This is similar to how thread-local variables are implemented
-// in thread libraries such as Linux pthreads.
+// in thread libraries such as Linux pthreads.h
 extern struct cpu *cpu asm("%gs:0");       // &cpus[cpunum()]
 extern struct proc *proc asm("%gs:4");     // cpus[cpunum()].proc
 
@@ -68,6 +73,11 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint signal;		       // each bit represent pending signals
+			       // signal 0 is represented by lsb
+  sighandler_t handler[MAXSIG];// signals' handlers 
+			       // handler for i'th signal is handler[i]
+  int signal_ignore[MAXSIG];   // if 0 ignore else execute handler
 };
 
 // Process memory is laid out contiguously, low addresses first:
Index: defs.h
===================================================================
--- defs.h	(revision 1)
+++ defs.h	(working copy)
@@ -116,6 +116,9 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int 		signal(int signum, void (*handler)(void));
+int 		sigsend(int pid, int signum);
+void		kbd_sigint(void);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -177,5 +180,6 @@
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
 
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
Index: ulib.c
===================================================================
--- ulib.c	(revision 1)
+++ ulib.c	(working copy)
@@ -103,3 +103,34 @@
     *dst++ = *src++;
   return vdst;
 }
+
+char* 
+strtok(char * str, char * delimiters)
+{
+  char * ans = 0;
+  static char * start;
+  char * end = 0; 
+  if (str != 0)
+    start = str;
+  // find start of token (first char not in delimiters)
+  while(*start != '\0' && strchr(delimiters,*start) != 0)
+  {
+    start++;
+  }
+  if (*start == '\0')
+    return 0;
+  // find end of token (first char in delimiters)
+  end = start + 1;
+  while(*end != '\0' && strchr(delimiters,*end) == 0)
+  {
+    end++;
+  }
+  ans = start;
+  if (*end != '\0')
+    start = end + 1;
+  else
+    start = end;
+  *end = '\0';
+  return ans;
+}
+
